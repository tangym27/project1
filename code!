//   while(full_arr[i]){
//     printf("======================\n" );
//     printf("full_arr[%d]: %s\n", i, full_arr[i]);
//     int j = 0;
//     char ** arr = parse_args(full_arr[i] , " ");
//     while(arr[j]){
//       printf("arr[%d]: %s\n", j, arr[j]);
//       j++;
//     }
//     //printf("changed directory!!\n" );
//     if (!strcmp(arr[0], "cd")){
//       chdir(arr[1]);
//     }
//     else if (!strcmp(arr[0], "exit")){
//       return 0;
//     }
//     else{
//           // THIS IS THE CHILD PROCESS
//           int firstborn = fork();
//           if (!firstborn){
//               printf("-------------------------------\nTESTING USING EXECVP:\n");
//               execvp(arr[0],arr);
//               return 0;
//           }
//           //THIS IS THE PARENT PROCESS
//           else {
//             int child_id = wait(&status);
//           }
//         }
//     i++;
//   }
// }
// printf("finished the full_arr\n");
---
//printf("%s\n",s);
// int fds[2];
// char line[100];
// fds[0] = 0;
// fds[1] = 1;
// printf("fd[0]:%d\n", fds[0]);
// printf("fd[1]:%d\n", fds[1]);
// pipe(fds);
// int f = fork();
// if (f){ // PARENT PROCESS
//   close(fds[1]);
//   read(fds[0], line, sizeof(line));
//   printf("parent received %s\n", line);
// }
// else if (!f){
//   close(fds[0]);
//   write(fds[1], "hello", 7);
// }
// return 0
